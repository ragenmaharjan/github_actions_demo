name: Deployment to Production

on:
    push: 
        branches: 
            - main
       
    # pull_request:
    #     branches: [ main, staging, development ]
jobs:
    buiild_upload_notify:
        name: build_upload_notify
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v1
            - uses: actions/setup-java@v1
              with:
                    java-version: '12.x'
            - uses: subosito/flutter-action@v1
              with:
                channel: 'stable'
            - name: Get Branch Name
              id: branch
              run: echo "::set-output name=branch::${GITHUB_REF##*/}"            
            - name: Get Today Date
              id: date
              run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
            - name: Get Folder Id by condition
              uses: haya14busa/action-cond@v1
              id: folderId
              with: 
                cond: ${{ steps.branch.outputs.branch=='main'}}
                if_true: ${{secrets.MASTERFOLDERID}}
                if_false: ${{secrets.QATESTFOLDERID}}
            - run: flutter pub get
            - run: flutter build apk
            - uses: actions/upload-artifact@v1
              with:
                name: release-apk
                path: build/app/outputs/apk/release/app-release.apk
            - name: Archive files
              run: |
                sudo apt-get update
                sudo apt-get install zip
                zip -r archive.zip *

            # - name: upload apk to Google Drive
            #   uses: adityak74/google-drive-upload-git-action@v0.3
            #   with:
            #     credentials: ${{secrets.CREDENTIALS}}
            #     filename: "build/app/outputs/apk/release/app-release.apk"
            #     # filename: "build/app/outputs/flutter-apk/app-release.apk"
            #     folderId: ${{steps.folderId.outputs.value}}
            #     # name: ${{steps.branch.outputs.branch}}_apk_${{steps.date.outputs.date}}.apk
            #     name: app-release.apk
            #     overwrite: "true" 
            #     mimeType: "application/vnd.android.package-archive"
              # uses: Jodebu/upload-to-drive@master
              # with:
              #   target: "build/app/outputs/flutter-apk/app-release.apk"
              #   credentials:  ${{secrets.CREDENTIALS}}
              #   folder:  ${{steps.folderId.outputs.value}}
    send_apk:
      runs-on: ubuntu-latest

      steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Set up Node.js
          uses: actions/setup-node@v2
          with:
            node-version: '14'

        - name: Install Nodemailer
          run: npm install nodemailer

        - name: Send APK via Email
          run: |
            const nodemailer = require('nodemailer');

            const transporter = nodemailer.createTransport({
              service: 'gmail',
              auth: {
                user: process.env.EMAIL_ADDRESS,
                pass: process.env.EMAIL_PASSWORD,
              },
            });

            const mailOptions = {
              from: process.env.EMAIL_ADDRESS,
              to: 'recipient@example.com', // Enter the recipient's email address
              subject: 'APK File',
              text: 'Here is the APK file you requested.',
              attachments: [
                {
                  path: ' build/app/outputs/apk/release/app-release.apk', // Update with the path to your APK file
                },
              ],
            };

            transporter.sendMail(mailOptions, function (error, info) {
              if (error) {
                console.error('Error sending email:', error);
              } else {
                console.log('Email sent:', info.response);
              }
            });